# Pre-commit hooks for LinkedIn Bot
# Run: pre-commit install
# Manual run: pre-commit run --all-files

repos:
  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.9.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=100]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=100]

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args: [--max-line-length=100, --ignore=E203,W503]
        additional_dependencies: [flake8-docstrings, flake8-bugbear]

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.6.1
    hooks:
      - id: mypy
        additional_dependencies: [types-requests, types-beautifulsoup4]
        args: [--ignore-missing-imports]

  # Security scanning
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, src/, main.py]
        exclude: tests/

  # General hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # Git-related
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-merge-conflict
      - id: no-commit-to-branch
        args: [--branch=main, --branch=production]
      
      # File formatting
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: mixed-line-ending
        args: [--fix=lf]
      
      # YAML/JSON validation
      - id: check-yaml
        args: [--unsafe]
      - id: check-json
      - id: pretty-format-json
        args: [--autofix, --indent=2]
      
      # Python-specific
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]
      
      # General security
      - id: detect-private-key
      - id: detect-aws-credentials

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: package.lock.json

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.3
    hooks:
      - id: prettier
        types: [yaml]
        exclude: \.github/workflows/.*\.yml$

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: [--fix, --ignore, node_modules]

  # Python dependency security
  - repo: https://github.com/pyupio/safety
    rev: 2.3.5
    hooks:
      - id: safety
        args: [--ignore=52495]  # Ignore specific CVE if needed

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Check for null bytes (the common issue we've been dealing with)
      - id: check-null-bytes
        name: Check for null bytes in Python files
        entry: bash -c 'find . -name "*.py" -exec grep -l $'\''\x00'\'' {} \; | head -1 && exit 1 || exit 0'
        language: system
        types: [python]
        
      # Ensure proper Python syntax
      - id: python-syntax-check
        name: Python syntax check
        entry: python -m py_compile
        language: system
        types: [python]
        
      # Check for large files
      - id: check-large-files
        name: Check for large files
        entry: bash -c 'find . -size +5M -not -path "./.git/*" | head -1 && exit 1 || exit 0'
        language: system
        
      # Ensure requirements.txt is properly formatted
      - id: requirements-txt-format
        name: Check requirements.txt format
        entry: bash -c 'sort requirements.txt | uniq > requirements_sorted.txt && mv requirements_sorted.txt requirements.txt'
        language: system
        files: requirements\.txt$
        
      # Check for TODO/FIXME comments in production code
      - id: no-todo-fixme
        name: Check for TODO/FIXME in production code
        entry: bash -c 'grep -rn "TODO\|FIXME" src/ && exit 1 || exit 0'
        language: system
        types: [python]
        
      # Ensure proper log level configuration
      - id: check-log-levels
        name: Check for debug logs in production
        entry: bash -c 'grep -rn "print(" src/ && echo "Use logging instead of print statements" && exit 1 || exit 0'
        language: system
        types: [python]

# Configuration for pre-commit.ci (if using)
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [hadolint-docker, detect-secrets]
  submodules: false
