name: Release

on:
  push:
    tags:
      - "v*.*.*"

env:
  PYTHON_VERSION: "3.13"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "## What's Changed" > changelog.md
          echo "" >> changelog.md
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s (%h)" >> changelog.md

          # Set output for release body
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: LinkedIn Bot ${{ github.ref }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload Assets
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build distribution
        run: |
          python -m build

      - name: Create source archive
        run: |
          tar -czf linkedin-bot-source.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            --exclude='htmlcov' \
            --exclude='.coverage' \
            .

      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/*.whl
          asset_name: linkedin_bot-${{ github.ref_name }}-py3-none-any.whl
          asset_content_type: application/zip

      - name: Upload source distribution to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/*.tar.gz
          asset_name: linkedin-bot-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload source archive to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./linkedin-bot-source.tar.gz
          asset_name: linkedin-bot-${{ github.ref_name }}-source.tar.gz
          asset_content_type: application/gzip

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/linkedin-bot:latest
            ${{ secrets.DOCKER_USERNAME }}/linkedin-bot:${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload, docker-release]
    if: always()

    steps:
      - name: Notify success
        if: ${{ needs.create-release.result == 'success' && needs.build-and-upload.result == 'success' && needs.docker-release.result == 'success' }}
        run: |
          echo "🎉 LinkedIn Bot ${{ github.ref }} released successfully!"
          echo "📦 Assets uploaded to GitHub Releases"
          echo "🐳 Docker image pushed to Docker Hub"

      - name: Notify failure
        if: ${{ needs.create-release.result == 'failure' || needs.build-and-upload.result == 'failure' || needs.docker-release.result == 'failure' }}
        run: |
          echo "❌ Release process failed. Please check the logs."
