name: LinkedIn Bot CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

env:
  PYTHON_VERSION: "3.13"

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort mypy

      - name: Code formatting check (Black)
        run: |
          black --check --diff src/ tests/ *.py

      - name: Import sorting check (isort)
        run: |
          isort --check-only --diff src/ tests/ *.py

      - name: Linting (flake8)
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checking (mypy)
        run: |
          mypy src/ --ignore-missing-imports

      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Check for security vulnerabilities (Safety)
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Security linting (Bandit)
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Create distribution package
        run: |
          python -m build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linkedin-bot-dist
          path: |
            dist/
            src/
            requirements.txt
            main.py
            README.md
          retention-days: 30

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/linkedin-bot
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-package, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: SSH to staging server and update the application

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests on staging..."
          # Add smoke tests for staging environment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-package, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: linkedin-bot-dist
          path: ./artifacts

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying LinkedIn Bot to production..."
          # Add your production deployment commands here
          # Example: Deploy to cloud service, update server, etc.

      - name: Health check
        run: |
          echo "üè• Running production health checks..."
          # Add health check commands

      - name: Notify deployment
        if: success()
        run: |
          echo "‚úÖ LinkedIn Bot successfully deployed to production!"
          # Add notification logic (Slack, Discord, etc.)

  notification:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, build-and-package]
    if: always()

    steps:
      - name: Notify success
        if: ${{ needs.lint-and-test.result == 'success' && needs.security-scan.result == 'success' }}
        run: |
          echo "‚úÖ All checks passed! LinkedIn Bot is ready."

      - name: Notify failure
        if: ${{ needs.lint-and-test.result == 'failure' || needs.security-scan.result == 'failure' }}
        run: |
          echo "‚ùå Some checks failed. Please review the logs."
