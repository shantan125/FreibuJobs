name: Azure Deployment

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "Dockerfile"
      - ".azure/**"
      - "requirements.txt"
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  AZURE_RESOURCE_GROUP: linkedin-bot-rg
  AZURE_CONTAINER_APP_NAME: linkedin-bot-app
  AZURE_CONTAINER_APP_ENV: linkedin-bot-env
  AZURE_CONTAINER_REGISTRY: linkedinbotacr
  AZURE_KEY_VAULT_NAME: linkedin-bot-kv
  IMAGE_NAME: linkedin-bot
  AZURE_LOCATION: "East US"

jobs:
  build-and-deploy:
    name: Build and Deploy to Azure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Azure resources if they don't exist
        run: |
          # Create resource group
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location "${{ env.AZURE_LOCATION }}" \
            --output none || true

          # Create Container Registry
          az acr create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_CONTAINER_REGISTRY }} \
            --sku Basic \
            --admin-enabled false \
            --output none || true

          # Create Key Vault
          az keyvault create \
            --name ${{ env.AZURE_KEY_VAULT_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location "${{ env.AZURE_LOCATION }}" \
            --enable-rbac-authorization true \
            --output none || true

          # Create Container App Environment
          az containerapp env create \
            --name ${{ env.AZURE_CONTAINER_APP_ENV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location "${{ env.AZURE_LOCATION }}" \
            --output none || true

      - name: Store secrets in Key Vault
        run: |
          # Store Telegram bot token
          az keyvault secret set \
            --vault-name ${{ env.AZURE_KEY_VAULT_NAME }} \
            --name "telegram-bot-token" \
            --value "${{ secrets.TELEGRAM_BOT_TOKEN }}" \
            --output none

          # Store other secrets if provided
          if [ ! -z "${{ secrets.LINKEDIN_EMAIL }}" ]; then
            az keyvault secret set \
              --vault-name ${{ env.AZURE_KEY_VAULT_NAME }} \
              --name "linkedin-email" \
              --value "${{ secrets.LINKEDIN_EMAIL }}" \
              --output none
          fi

          if [ ! -z "${{ secrets.LINKEDIN_PASSWORD }}" ]; then
            az keyvault secret set \
              --vault-name ${{ env.AZURE_KEY_VAULT_NAME }} \
              --name "linkedin-password" \
              --value "${{ secrets.LINKEDIN_PASSWORD }}" \
              --output none
          fi

      - name: Build and push Docker image to ACR
        run: |
          # Build and push image
          az acr build \
            --registry ${{ env.AZURE_CONTAINER_REGISTRY }} \
            --image ${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --image ${{ env.IMAGE_NAME }}:latest \
            --file Dockerfile \
            .

      - name: Deploy to Azure Container Apps
        run: |
          # Get ACR login server
          ACR_LOGIN_SERVER=$(az acr show \
            --name ${{ env.AZURE_CONTAINER_REGISTRY }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query loginServer \
            --output tsv)

          # Check if container app exists
          if az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --output none 2>/dev/null; then
            
            echo "Updating existing container app..."
            az containerapp update \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image "$ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }}" \
              --output table
          else
            echo "Creating new container app..."
            az containerapp create \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.AZURE_CONTAINER_APP_ENV }} \
              --image "$ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }}" \
              --target-port 8080 \
              --ingress external \
              --min-replicas 0 \
              --max-replicas 3 \
              --cpu 0.5 \
              --memory 1.0Gi \
              --registry-server "$ACR_LOGIN_SERVER" \
              --registry-identity system \
              --env-vars \
                AZURE_ENVIRONMENT=production \
                LOG_LEVEL=INFO \
                ENABLE_METRICS=true \
                HEALTH_CHECK_ENABLED=true \
                MAX_RESULTS_PER_SEARCH=10 \
                DEFAULT_LOCATION=India \
              --secrets \
                telegram-bot-token="keyvaultref:https://${{ env.AZURE_KEY_VAULT_NAME }}.vault.azure.net/secrets/telegram-bot-token,identityref:system" \
              --output table
          fi

      - name: Assign required permissions
        run: |
          # Get the Container App's system-assigned identity
          PRINCIPAL_ID=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query identity.principalId \
            --output tsv)

          if [ ! -z "$PRINCIPAL_ID" ] && [ "$PRINCIPAL_ID" != "null" ]; then
            # Assign AcrPull role to Container App identity
            az role assignment create \
              --assignee "$PRINCIPAL_ID" \
              --role "AcrPull" \
              --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.ContainerRegistry/registries/${{ env.AZURE_CONTAINER_REGISTRY }}" \
              --output none || true
            
            # Assign Key Vault Secrets User role to Container App identity
            az role assignment create \
              --assignee "$PRINCIPAL_ID" \
              --role "Key Vault Secrets User" \
              --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/${{ env.AZURE_KEY_VAULT_NAME }}" \
              --output none || true
          fi

      - name: Run health check
        run: |
          # Get the Container App FQDN
          FQDN=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)

          if [ ! -z "$FQDN" ]; then
            echo "Container App URL: https://$FQDN"
            
            # Wait for the app to be ready
            echo "Waiting for application to start..."
            sleep 60
            
            # Health check
            for i in {1..5}; do
              echo "Health check attempt $i/5..."
              if curl -f -s "https://$FQDN/health" > /dev/null; then
                echo "✅ Health check passed"
                break
              else
                echo "❌ Health check failed, retrying in 30s..."
                sleep 30
              fi
              
              if [ $i -eq 5 ]; then
                echo "❌ Health check failed after 5 attempts"
                exit 1
              fi
            done
          fi

      - name: Get deployment information
        run: |
          FQDN=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)

          echo "🎉 Deployment completed successfully!"
          echo ""
          echo "📋 Deployment Details:"
          echo "  Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
          echo "  Container App: ${{ env.AZURE_CONTAINER_APP_NAME }}"
          echo "  Image: ${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "  URL: https://$FQDN"
          echo "  Health Check: https://$FQDN/health"
          echo ""
          echo "🔧 Management Commands:"
          echo "  View logs: az containerapp logs show --name ${{ env.AZURE_CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --follow"
          echo "  Scale app: az containerapp update --name ${{ env.AZURE_CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --min-replicas 1"

          # Save deployment info to GitHub summary
          echo "## 🚀 Azure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status**: Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **URL**: https://$FQDN" >> $GITHUB_STEP_SUMMARY
          echo "🏥 **Health Check**: https://$FQDN/health" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Image**: ${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Region**: ${{ env.AZURE_LOCATION }}" >> $GITHUB_STEP_SUMMARY

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()

    steps:
      - name: Notify success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ LinkedIn Bot successfully deployed to Azure!"
          echo "The bot is now running in Azure Container Apps."

      - name: Notify failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Azure deployment failed!"
          echo "Please check the deployment logs for details."
          exit 1
