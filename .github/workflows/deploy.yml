name: Deploy LinkedIn Bot to Azure

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "Dockerfile"
      - "requirements.txt"
      - "main.py"
      - ".github/workflows/**"
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: linkedin-bot-rg
  AZURE_CONTAINER_APP: linkedin-bot-app
  AZURE_CONTAINER_ENV: linkedin-bot-env
  AZURE_REGISTRY: linkedinbotacr
  IMAGE_NAME: linkedin-bot

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Azure Resources
        run: |
          echo "🔧 Setting up Azure resources..."

          # Ensure resource group exists
          az group show --name ${{ env.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1 || \
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location eastus

          # Ensure Container Registry exists
          az acr show --name ${{ env.AZURE_REGISTRY }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1 || \
          az acr create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_REGISTRY }} \
            --sku Basic \
            --admin-enabled true

      - name: Build and Deploy to Azure Container Apps
        run: |
          echo "🚀 Starting deployment..."
          echo "📝 Commit SHA: ${{ github.sha }}"

          # Build and push image first
          echo "🔨 Building Docker image..."
          az acr build --registry linkedinbotacr --image linkedin-bot:${{ github.sha }} .

          # Ensure Container Apps environment exists
          echo "🔧 Checking Container Apps environment..."
          az containerapp env show \
            --name ${{ env.AZURE_CONTAINER_ENV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1 || \
          az containerapp env create \
            --name ${{ env.AZURE_CONTAINER_ENV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location eastus

          # Force complete revision replacement
          echo "🔄 Forcing complete container replacement..."
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "🕒 Deployment timestamp: $TIMESTAMP"

          # Delete existing container app completely to force fresh deployment
          echo "🗑️ Removing existing container app for clean deployment..."
          az containerapp delete \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --yes || echo "No existing app to delete"

          echo "⏳ Waiting for cleanup to complete..."
          sleep 60

          # Create fresh container app with new image
          echo "🆕 Creating fresh container app with streaming code..."
          az containerapp create \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment ${{ env.AZURE_CONTAINER_ENV }} \
            --image linkedinbotacr.azurecr.io/linkedin-bot:${{ github.sha }} \
            --target-port 8080 \
            --ingress external \
            --min-replicas 1 \
            --max-replicas 3 \
            --cpu 0.5 \
            --memory 1.0Gi \
            --env-vars \
              TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}" \
              AZURE_ENVIRONMENT=production \
              LOG_LEVEL=DEBUG \
              MAX_RESULTS_PER_SEARCH=10 \
              DEFAULT_LOCATION="India" \
              DEPLOYMENT_ID="streaming-force-$TIMESTAMP" \
              BUILD_SHA="${{ github.sha }}"

          echo "✅ Fresh container app created with streaming code!"      - name: Verify Deployment and Code Version
        run: |
          echo "🔍 Verifying deployment..."

          # Get app URL and details
          FQDN=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)

          REVISION=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.latestRevisionName \
            --output tsv)

          echo "📍 App URL: https://$FQDN"
          echo "📦 Revision: $REVISION"

          # Wait for container to be ready
          echo "⏳ Waiting for container to start (90 seconds)..."
          sleep 90

          # Check if container is running and responsive
          for i in {1..5}; do
            echo "🔍 Health check attempt $i/5..."
            if curl -f -s "https://$FQDN/health" > /dev/null 2>&1; then
              echo "✅ Container is healthy and responding!"
              break
            else
              echo "⚠️ Health check failed, retrying in 30s..."
              sleep 30
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              echo "📋 Container logs:"
              az containerapp logs show \
                --name ${{ env.AZURE_CONTAINER_APP }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --tail 50 || echo "Could not retrieve logs"
            fi
          done

          # Verify environment variables
          echo "🔧 Checking deployment configuration..."
          az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.template.containers[0].env \
            --output table

      - name: Deployment Summary
        run: |
          # Get deployment details
          FQDN=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)

          REVISION=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.latestRevisionName \
            --output tsv)

          echo "🎉 Deployment completed successfully!"
          echo ""
          echo "📋 Details:"
          echo "  • App: ${{ env.AZURE_CONTAINER_APP }}"
          echo "  • Revision: $REVISION"
          echo "  • URL: https://$FQDN"
          echo "  • Commit: ${{ github.sha }}"
          echo ""
          echo "🔧 Quick commands:"
          echo "  • View logs: az containerapp logs show --name ${{ env.AZURE_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --follow"
          echo "  • Scale up: az containerapp update --name ${{ env.AZURE_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --min-replicas 1"

          # GitHub summary
          echo "## 🚀 LinkedIn Bot Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status**: Successfully deployed" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **URL**: https://$FQDN" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Revision**: $REVISION" >> $GITHUB_STEP_SUMMARY
          echo "💻 **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The LinkedIn Bot is now running with the latest streaming functionality!" >> $GITHUB_STEP_SUMMARY
