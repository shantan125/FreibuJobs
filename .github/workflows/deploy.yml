name: Deploy LinkedIn Bot to Azure - Clean Streaming Fix

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "Dockerfile"
      - "requirements.txt"
      - "main.py"
      - ".github/workflows/**"
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: linkedin-bot-rg
  AZURE_CONTAINER_APP: linkedin-bot-app
  AZURE_CONTAINER_ENV: linkedin-bot-env
  AZURE_REGISTRY: linkedinbotacr
  IMAGE_NAME: linkedin-bot

jobs:
  setup-infrastructure:
    name: Setup Azure Infrastructure
    runs-on: ubuntu-latest
    outputs:
      registry-exists: ${{ steps.check-resources.outputs.registry-exists }}
      environment-exists: ${{ steps.check-resources.outputs.environment-exists }}

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure Container Apps Extension
        run: |
          echo "üîß Installing Azure Container Apps extension..."
          az extension add --name containerapp --upgrade
          echo "‚úÖ Extension ready"

      - name: Check and Create Resource Group
        run: |
          echo "üîß Checking resource group..."
          if az group show --name ${{ env.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "‚úÖ Resource group exists"
          else
            echo "üÜï Creating resource group..."
            az group create \
              --name ${{ env.AZURE_RESOURCE_GROUP }} \
              --location eastus
            echo "‚úÖ Resource group created"
          fi

      - name: Check and Create Container Registry
        id: check-resources
        run: |
          echo "üîß Checking container registry..."
          if az acr show --name ${{ env.AZURE_REGISTRY }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "‚úÖ Container registry exists"
            echo "registry-exists=true" >> $GITHUB_OUTPUT
          else
            echo "üÜï Creating container registry..."
            az acr create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.AZURE_REGISTRY }} \
              --sku Basic \
              --admin-enabled true
            echo "‚úÖ Container registry created"
            echo "registry-exists=false" >> $GITHUB_OUTPUT
          fi

          echo "üîß Checking container environment..."
          if az containerapp env show --name ${{ env.AZURE_CONTAINER_ENV }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "‚úÖ Container environment exists"
            echo "environment-exists=true" >> $GITHUB_OUTPUT
          else
            echo "üÜï Creating container environment..."
            az containerapp env create \
              --name ${{ env.AZURE_CONTAINER_ENV }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --location eastus
            echo "‚úÖ Container environment created"
            echo "environment-exists=false" >> $GITHUB_OUTPUT
          fi

  build-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    outputs:
      image-url: ${{ steps.build.outputs.image-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and Push Image
        id: build
        run: |
          echo "üî® Building Docker image..."
          echo "üìù Commit SHA: ${{ github.sha }}"

          # Authenticate with registry
          az acr login --name ${{ env.AZURE_REGISTRY }}

          IMAGE_TAG="${{ env.AZURE_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"

          echo "üèóÔ∏è Building image: $IMAGE_TAG"
          az acr build \
            --registry ${{ env.AZURE_REGISTRY }} \
            --image ${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --file Dockerfile \
            .

          echo "‚úÖ Image built and pushed: $IMAGE_TAG"
          echo "image-url=$IMAGE_TAG" >> $GITHUB_OUTPUT

  cleanup-old-deployment:
    name: Clean Up Old Deployment
    runs-on: ubuntu-latest
    needs: [setup-infrastructure, build-image]

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure Container Apps Extension
        run: |
          echo "üîß Installing Azure Container Apps extension..."
          az extension add --name containerapp --upgrade
          echo "‚úÖ Extension ready"

      - name: Delete Existing Container App
        run: |
          echo "üóëÔ∏è Removing existing container app for clean deployment..."

          if az containerapp show --name ${{ env.AZURE_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "üîç Found existing container app, deleting..."
            az containerapp delete \
              --name ${{ env.AZURE_CONTAINER_APP }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --yes
            echo "‚úÖ Existing container app deleted"
            
            echo "‚è≥ Waiting for cleanup to complete..."
            sleep 60
          else
            echo "‚ÑπÔ∏è No existing container app found"
          fi

  deploy-fresh-container:
    name: Deploy Fresh Container
    runs-on: ubuntu-latest
    needs: [setup-infrastructure, build-image, cleanup-old-deployment]
    outputs:
      app-url: ${{ steps.deploy.outputs.app-url }}
      revision: ${{ steps.deploy.outputs.revision }}

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure Container Apps Extension
        run: |
          echo "üîß Installing Azure Container Apps extension..."
          az extension add --name containerapp --upgrade
          echo "‚úÖ Extension ready"

      - name: Create Fresh Container App
        id: deploy
        run: |
          echo "üÜï Creating fresh container app with streaming code..."
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "üïí Deployment timestamp: $TIMESTAMP"

          # Get registry credentials
          REGISTRY_USERNAME=$(az acr credential show --name ${{ env.AZURE_REGISTRY }} --query username --output tsv)
          REGISTRY_PASSWORD=$(az acr credential show --name ${{ env.AZURE_REGISTRY }} --query passwords[0].value --output tsv)

          echo "üîê Registry authentication configured"

          # Verify image exists
          echo "üîç Verifying image exists..."
          IMAGE_EXISTS=$(az acr repository show --name ${{ env.AZURE_REGISTRY }} --image ${{ env.IMAGE_NAME }}:${{ github.sha }} --query name --output tsv 2>/dev/null || echo "not-found")
          if [ "$IMAGE_EXISTS" = "not-found" ]; then
            echo "‚ùå Image not found in registry!"
            exit 1
          fi
          echo "‚úÖ Image verified: ${{ needs.build-image.outputs.image-url }}"

          az containerapp create \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment ${{ env.AZURE_CONTAINER_ENV }} \
            --image ${{ needs.build-image.outputs.image-url }} \
            --registry-server ${{ env.AZURE_REGISTRY }}.azurecr.io \
            --registry-username $REGISTRY_USERNAME \
            --registry-password $REGISTRY_PASSWORD \
            --target-port 8080 \
            --ingress external \
            --min-replicas 1 \
            --max-replicas 3 \
            --cpu 0.5 \
            --memory 1.0Gi \
            --env-vars \
              TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}" \
              AZURE_ENVIRONMENT=production \
              LOG_LEVEL=DEBUG \
              MAX_RESULTS_PER_SEARCH=10 \
              DEFAULT_LOCATION="India" \
              DEPLOYMENT_ID="streaming-force-$TIMESTAMP" \
              BUILD_SHA="${{ github.sha }}"

          echo "‚úÖ Fresh container app created!"

          # Get app details
          FQDN=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)

          REVISION=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.latestRevisionName \
            --output tsv)

          echo "üìç App URL: https://$FQDN"
          echo "üì¶ Revision: $REVISION"

          echo "app-url=https://$FQDN" >> $GITHUB_OUTPUT
          echo "revision=$REVISION" >> $GITHUB_OUTPUT

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-fresh-container]

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure Container Apps Extension
        run: |
          echo "üîß Installing Azure Container Apps extension..."
          az extension add --name containerapp --upgrade
          echo "‚úÖ Extension ready"

      - name: Wait for Container Startup
        run: |
          echo "‚è≥ Waiting for container to start (90 seconds)..."
          sleep 90

      - name: Health Check
        run: |
          echo "üîç Performing health checks..."
          APP_URL="${{ needs.deploy-fresh-container.outputs.app-url }}"

          for i in {1..5}; do
            echo "üîç Health check attempt $i/5..."
            if curl -f -s "$APP_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Container is healthy and responding!"
              break
            else
              echo "‚ö†Ô∏è Health check failed, retrying in 30s..."
              sleep 30
            fi
            
            if [ $i -eq 5 ]; then
              echo "‚ùå Health check failed after 5 attempts"
              echo "üìã Recent container logs:"
              az containerapp logs show \
                --name ${{ env.AZURE_CONTAINER_APP }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --tail 20 || echo "Could not retrieve logs"
            fi
          done

      - name: Verify Configuration
        run: |
          echo "üîß Checking deployment configuration..."

          echo "üìã Environment Variables:"
          az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.template.containers[0].env \
            --output table

          echo "üì¶ Container Image:"
          az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.template.containers[0].image \
            --output tsv

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-fresh-container, verify-deployment]
    if: always()

    steps:
      - name: Generate Summary
        run: |
          echo "üéâ Deployment Process Completed!"
          echo ""
          echo "üìã Deployment Details:"
          echo "  ‚Ä¢ App: ${{ env.AZURE_CONTAINER_APP }}"
          echo "  ‚Ä¢ Revision: ${{ needs.deploy-fresh-container.outputs.revision }}"
          echo "  ‚Ä¢ URL: ${{ needs.deploy-fresh-container.outputs.app-url }}"
          echo "  ‚Ä¢ Commit: ${{ github.sha }}"
          echo "  ‚Ä¢ Build Time: $(date)"
          echo ""
          echo "üîß Management Commands:"
          echo "  ‚Ä¢ View logs: az containerapp logs show --name ${{ env.AZURE_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --follow"
          echo "  ‚Ä¢ Scale app: az containerapp update --name ${{ env.AZURE_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --min-replicas 1"
          echo ""
          echo "ü§ñ Testing:"
          echo "  ‚Ä¢ Open Telegram and test the bot"
          echo "  ‚Ä¢ Jobs should now stream individually (not in batches of 10)"
          echo "  ‚Ä¢ Check logs for DEBUG streaming messages"

          # GitHub Actions Summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## üöÄ LinkedIn Bot Deployment Complete

          ### ‚úÖ Deployment Status: SUCCESS

          | Component | Status | Details |
          |-----------|--------|---------|
          | **Container App** | ‚úÖ Created | Fresh deployment with streaming code |
          | **Image** | ‚úÖ Built | SHA: \`${{ github.sha }}\` |
          | **URL** | ‚úÖ Active | ${{ needs.deploy-fresh-container.outputs.app-url }} |
          | **Revision** | ‚úÖ Latest | ${{ needs.deploy-fresh-container.outputs.revision }} |

          ### üéØ What's New
          - **Complete container replacement** (not update)
          - **Streaming functionality** with individual job delivery
          - **Debug logging** enabled for troubleshooting
          - **Enhanced error handling** and deployment verification

          ### üß™ Testing Instructions
          1. Open Telegram and message your bot
          2. Request job search (e.g., "Python Developer")
          3. **Expected**: Jobs appear one-by-one as they're found
          4. **Fixed**: No more batches of 10 jobs at once

          ### üìä Monitoring
          - **Logs**: Use Azure CLI or portal to check real-time logs
          - **Health**: Monitor the health endpoint
          - **Performance**: Check individual job streaming behavior
          EOF
