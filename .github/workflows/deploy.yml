name: üöÄ LinkedIn Bot Deploy

on:
  push:
    branches: [main]
    paths:
      - "Dockerfile"
      - "requirements.txt"
      - "src/**"
      - "main.py"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_RESOURCE_GROUP: rg-linkedin-bot
  AZURE_CONTAINER_ENV: linkedin-bot-env
  AZURE_REGISTRY: linkedinbotacr
  CONTAINER_APP: linkedin-bot-app
  IMAGE_NAME: linkedin-bot
  AZURE_LOCATION: eastasia

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üîë Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üî® Build image in ACR
        run: |
          az acr build \
            --registry ${{ env.AZURE_REGISTRY }} \
            --image ${{ env.IMAGE_NAME }}:latest \
            --file Dockerfile \
            .

  ensure-env:
    name: Ensure Container Apps Environment
    runs-on: ubuntu-latest
    needs: build
    outputs:
      env_id: ${{ steps.resolve-env.outputs.ENV_ID }}
    steps:
      - name: üîë Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üß© Ensure CLI extension
        run: az extension add --name containerapp --upgrade

      - name: üèóÔ∏è Ensure Resource Group
        run: az group create --name ${{ env.AZURE_RESOURCE_GROUP }} --location ${{ env.AZURE_LOCATION }} 1> /dev/null

      - name: üîé Resolve or create Environment
        id: resolve-env
        run: |
          set -e
          # Prefer an explicit env ID if provided as a secret
          if [ -n "${{ secrets.AZURE_CONTAINER_ENV_ID }}" ]; then
            echo "Using env id from secret."
            ENV_ID='${{ secrets.AZURE_CONTAINER_ENV_ID }}'
          else
            # List managed environments in the target region across the subscription
            ENV_ID=$(az resource list \
              --resource-type Microsoft.App/managedEnvironments \
              --location "${{ env.AZURE_LOCATION }}" \
              --query "[0].id" -o tsv)
          fi

          if [ -z "$ENV_ID" ]; then
            echo "No Container Apps environment found in region; creating one..."
            az containerapp env create \
              --name ${{ env.AZURE_CONTAINER_ENV }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --location ${{ env.AZURE_LOCATION }}
            ENV_ID=$(az containerapp env show \
              --name ${{ env.AZURE_CONTAINER_ENV }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query id -o tsv)
          else
            echo "Found existing environment in region."
          fi

          echo "ENV_ID=$ENV_ID" >> "$GITHUB_OUTPUT"

  deploy:
    name: Deploy Container App
    runs-on: ubuntu-latest
    needs: ensure-env
    steps:
      - name: üîë Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üß© Ensure CLI extension
        run: az extension add --name containerapp --upgrade

      - name: üîê Get ACR credentials
        id: acr
        run: |
          echo "REG_USER=$(az acr credential show --name ${{ env.AZURE_REGISTRY }} --query username -o tsv)" >> $GITHUB_OUTPUT
          echo "REG_PASS=$(az acr credential show --name ${{ env.AZURE_REGISTRY }} --query passwords[0].value -o tsv)" >> $GITHUB_OUTPUT

      - name: üßπ Clean previous app (if any)
        run: |
          if az containerapp show --name ${{ env.CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} 1> /dev/null 2>&1; then
            echo "Deleting existing Container App for a clean deployment..."
            az containerapp delete --yes --name ${{ env.CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
            
            echo "Waiting for complete deletion..."
            for i in {1..120}; do
              if ! az containerapp show --name ${{ env.CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} 1> /dev/null 2>&1; then
                echo "Container App fully deleted."
                break
              fi
              echo "Still deleting... (attempt $i/120)"
              sleep 10
            done
            
            # Additional wait to ensure Azure propagates the deletion
            echo "Waiting additional 30 seconds for Azure propagation..."
            sleep 30
          else
            echo "No existing Container App found."
          fi

      - name: üöÄ Create fresh Container App
        run: |
          # Verify no app exists before creation
          if az containerapp show --name ${{ env.CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} 1> /dev/null 2>&1; then
            echo "ERROR: Container App still exists after deletion. Failing to avoid conflicts."
            exit 1
          fi
          
          echo "Creating new Container App..."
          # First create the app without secrets to avoid validation issues
          az containerapp create \
            --name ${{ env.CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment "${{ needs.ensure-env.outputs.env_id }}" \
            --image ${{ env.AZURE_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
            --registry-server ${{ env.AZURE_REGISTRY }}.azurecr.io \
            --registry-username "${{ steps.acr.outputs.REG_USER }}" \
            --registry-password "${{ steps.acr.outputs.REG_PASS }}" \
            --target-port 8080 \
            --ingress external \
            --min-replicas 1 \
            --max-replicas 1 \
            --cpu 0.25 \
            --memory 0.5Gi \
            --env-vars \
              MAX_RESULTS_PER_SEARCH=10 \
              DEFAULT_LOCATION="India"

      - name: üîê Add secrets and update environment variables
        run: |
          # Add the Telegram bot token as a secret
          az containerapp secret set \
            --name ${{ env.CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --secrets telegram-bot-token="${{ secrets.TELEGRAM_BOT_TOKEN }}"
          
          # Update to use the secret in environment variables
          az containerapp update \
            --name ${{ env.CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --set configuration.activeRevisionsMode=Single \
            --set-env-vars \
              MAX_RESULTS_PER_SEARCH=10 \
              DEFAULT_LOCATION="India" \
              TELEGRAM_BOT_TOKEN=secretref:telegram-bot-token

      - name: ‚úÖ Check Status
        run: |
          echo "üéâ Deployment completed!"
          az containerapp show --name ${{ env.CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.runningStatus" -o tsv
