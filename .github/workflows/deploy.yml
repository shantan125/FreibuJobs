name: Deploy LinkedIn Bot to Azure

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "Dockerfile"
      - "requirements.txt"
      - "main.py"
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: linkedin-bot-rg
  AZURE_CONTAINER_APP: linkedin-bot-app
  AZURE_CONTAINER_ENV: linkedin-bot-env
  AZURE_REGISTRY: linkedinbotacr
  IMAGE_NAME: linkedin-bot

jobs:
  validate-and-deploy:
    name: Validate Code and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Source Files
        run: |
          echo "üîç Validating source files for encoding issues..."

          # Check for null bytes in Python files
          if find . -name "*.py" -exec grep -l $'\x00' {} \; | head -1; then
            echo "‚ùå Found null bytes in Python files:"
            find . -name "*.py" -exec grep -l $'\x00' {} \;
            exit 1
          fi

          # Check Python syntax
          python3 -m py_compile main.py
          find src -name "*.py" -exec python3 -m py_compile {} \;

          echo "‚úÖ All source files validated successfully"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Azure CLI Extensions
        run: |
          az extension add --name containerapp --upgrade
          echo "‚úÖ Azure CLI extensions ready"

      - name: Build and Push Image
        id: build
        run: |
          echo "üî® Building Docker image..."

          # Build with unique tag
          IMAGE_TAG="${{ env.AZURE_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"

          az acr build \
            --registry ${{ env.AZURE_REGISTRY }} \
            --image ${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --file Dockerfile \
            .

          echo "‚úÖ Image built: $IMAGE_TAG"
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to Container Apps
        run: |
          echo "üöÄ Deploying to Azure Container Apps..."

          # Check if app exists
          if az containerapp show --name ${{ env.AZURE_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "üì¶ Updating existing container app..."
            az containerapp update \
              --name ${{ env.AZURE_CONTAINER_APP }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image ${{ steps.build.outputs.image-tag }} \
              --set-env-vars \
                AZURE_ENVIRONMENT=production \
                LOG_LEVEL=DEBUG \
                MAX_RESULTS_PER_SEARCH=10 \
                DEFAULT_LOCATION="India" \
                BUILD_SHA="${{ github.sha }}" \
                DEPLOYMENT_TIME="$(date -u +%Y%m%d-%H%M%S)" \
              --replace-secrets \
                telegram-bot-token="${{ secrets.TELEGRAM_BOT_TOKEN }}" \
              --secret-env-vars \
                TELEGRAM_BOT_TOKEN=telegram-bot-token
          else
            echo "üÜï Creating new container app..."
            
            # Get registry credentials
            REGISTRY_USERNAME=$(az acr credential show --name ${{ env.AZURE_REGISTRY }} --query username -o tsv)
            REGISTRY_PASSWORD=$(az acr credential show --name ${{ env.AZURE_REGISTRY }} --query passwords[0].value -o tsv)
            
            az containerapp create \
              --name ${{ env.AZURE_CONTAINER_APP }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.AZURE_CONTAINER_ENV }} \
              --image ${{ steps.build.outputs.image-tag }} \
              --registry-server ${{ env.AZURE_REGISTRY }}.azurecr.io \
              --registry-username $REGISTRY_USERNAME \
              --registry-password $REGISTRY_PASSWORD \
              --target-port 8080 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 2 \
              --cpu 0.5 \
              --memory 1.0Gi \
              --env-vars \
                AZURE_ENVIRONMENT=production \
                LOG_LEVEL=DEBUG \
                MAX_RESULTS_PER_SEARCH=10 \
                DEFAULT_LOCATION="India" \
                BUILD_SHA="${{ github.sha }}" \
                DEPLOYMENT_TIME="$(date -u +%Y%m%d-%H%M%S)" \
              --secrets \
                telegram-bot-token="${{ secrets.TELEGRAM_BOT_TOKEN }}" \
              --secret-env-vars \
                TELEGRAM_BOT_TOKEN=telegram-bot-token
          fi

      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."

          # Wait for deployment to be ready
          sleep 30

          # Get app URL
          APP_URL=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn -o tsv)

          echo "üìç App URL: https://$APP_URL"

          # Check container status
          STATUS=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.runningStatus -o tsv)

          if [ "$STATUS" = "Running" ]; then
            echo "‚úÖ Container app is running successfully"
          else
            echo "‚ö†Ô∏è Container status: $STATUS"
          fi

          # Show recent logs
          echo "üìã Recent logs:"
          az containerapp logs show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --tail 10 || echo "Could not retrieve logs"

      - name: Deployment Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo ""
          echo "üìã Deployment Details:"
          echo "  ‚Ä¢ App: ${{ env.AZURE_CONTAINER_APP }}"
          echo "  ‚Ä¢ Image: ${{ steps.build.outputs.image-tag }}"
          echo "  ‚Ä¢ Environment: production"
          echo "  ‚Ä¢ Commit: ${{ github.sha }}"
          echo ""
          echo "üß™ Testing:"
          echo "  ‚Ä¢ Bot should stream jobs individually"
          echo "  ‚Ä¢ No more batches of 10 jobs"
          echo "  ‚Ä¢ Check Telegram for real-time job delivery"
          echo ""
          echo "üìä Monitoring:"
          echo "  ‚Ä¢ View logs: az containerapp logs show --name ${{ env.AZURE_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --follow"
