name: Development

on:
  push:
    branches: [develop, feature/*, bugfix/*, hotfix/*]
  pull_request:
    branches: [develop]

env:
  PYTHON_VERSION: "3.13"

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          pytest tests/ -v --tb=short

      - name: Test installation
        run: |
          pip install -e .
          python -c "import src; print('✅ Package installed successfully')"

  lint-quick:
    name: Quick Lint Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8

      - name: Quick format check
        run: |
          black --check --diff src/ tests/ *.py || echo "❌ Code formatting issues found"
          isort --check-only --diff src/ tests/ *.py || echo "❌ Import sorting issues found"
          flake8 src/ tests/ --count --max-line-length=127 || echo "❌ Linting issues found"

  build-test:
    name: Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Test build
        run: |
          python -m build
          echo "✅ Package builds successfully"

      - name: Test Docker build
        run: |
          docker build -t linkedin-bot:test .
          echo "✅ Docker image builds successfully"

  auto-merge:
    name: Auto Merge
    runs-on: ubuntu-latest
    needs: [test, lint-quick, build-test]
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'

    steps:
      - name: Auto-approve dependabot PRs
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge dependabot PRs
        uses: pascalgn/merge-action@v0.15.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          merge_method: squash
